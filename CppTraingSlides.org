#+Title: C++ Training
# +Author: Prasad Ghole
#+Email: prasad.ghole@lnttechservices.com
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/ 
#+REVEAL_THEME: night
#+OPTIONS: toc:nil num:nil timestamp:nil 


* Introduction
C++ is a statically typed, compiled, general-purpose, case-sensitive, free-form programming language that supports procedural,
object-oriented, and generic programming paradigms.
** Standard
 | Year | C++ Standard       | Name  |
 |------+--------------------+-------|
 | 1998 | ISO/IEC 14882:1998 | C++98 |
 | 2003 | ISO/IEC 14882:2003 | C++03 |
 | 2011 | ISO/IEC 14882:2011 | C++11 |
 | 2014 | ISO/IEC 14882:2014 | C++14 |
 | 2017 | ISO/IEC 14882:2017 | C++17 |
   
* Hello World
#+BEGIN_SRC C++  :exports both :cache yes
#include <iostream>  //Used for output data to console

//Program starts here
int main()
{
     //Display this message
     //Expression
     std::cout << "Hello, world. " << std::endl;
     // Program return successfully
     return 0;
}
#+END_SRC

#+RESULTS[3167d5daadb9288017c8d213d638e12e7444d900]:
| Hello | world. |

* History
C++ was developed by Bjarne Stroustrup starting in 1979 at Bell Labs in Murray Hill, New Jersey,
as an enhancement to the C language and originally named C with Classes but later it was renamed 
C++ in 1983.
* Setup
  For windows we can download latest precompiled binaries for gcc tool chain at tdm-gcc.trdragon.org
  

* Build Tools
  gnu toolchain provide g++ command to build executable from source code.
#+BEGIN_SRC shell
g++ Program.cpp
#+END_SRC
* Popular Tools
| Tools         | Platforms              |
|---------------+------------------------|
| Visual Studio | Windows                |
| Xcode         | Mac                    |
| CodeBlock     | Windows                |
| QT Creator    | Windows, linux and Mac |
|               |                        |

* Build Process
** Pre Processing
** Compiling
#+BEGIN_SRC shell :exports code
g++ --std=c++y hello.cpp -o hello.cpp
#+END_SRC

#+RESULTS:
| Microsoft                           | Windows | [Version  | 10.0.16299.785] |     |        |           |
| (c)                                 |    2017 | Microsoft | Corporation.    | All | rights | reserved. |
|                                     |         |           |                 |     |        |           |
| c:\Users\20006401\cpptraining>More? |         |           |                 |     |        |           |

** Linking

Converting C++ source code in machine language which can be exectured by underline microprocessor
is called as build process.
** Loading 
** Execution
* Language Features
1. Statically typed
2. Support procedural , object oriented and generic programming paradigms
3. Compiled
4. Versatile standard library
5. Encapsulation
6. Inheritance
7. Polymorphism 

* Literals
Literals are tokens of C++ program that represent constant values embedded in source code.
*** Interger Literals
| Literal     | Desctiption                                                       |  Example |
|-------------+-------------------------------------------------------------------+----------|
| Decimal     | non zero decimal digit followed by zero or more significant digit |       42 |
| Octal       | digit zero followed by zero or more octal digits (0-7)            |      052 |
| Hexadecimal | character sequence 0x or 0X followed by hex digits (0-9 , a-f)    |     0x2a |
| binary      | character sequence 0b or 0B followed by binary digits (0,1)       | 0b101010 |

Since 2014 you can use optinal single quotes (') as a serperator.
Following variables are initialized for same values
#+BEGIN_SRC C++ :exports code :eval no
unsigned long long l1 = 18446744073709550592ull; // C++11
unsigned long long l2 = 18'446'744'073'709'550'592llu; // C++14
unsigned long long l3 = 1844'6744'0737'0955'0592uLL; // C++14
unsigned long long l4 = 184467'440737'0'95505'92LLU; // C++14
#+END_SRC

Hexadecimal literals ending in e or E followed by + or - must be seperated from operator with white space.
#+BEGIN_SRC C++ :exports code :eval no
auto x = 0xE+2.0;   // error
auto y = 0xa+2.0;   // OK
auto z = 0xE +2.0;  // OK
auto q = (0xE)+2.0; // OK
#+END_SRC
*** Integer suffix
    u or U unsigned suffix
    ll or LL long long suffix
#+BEGIN_SRC C++ :exports both :cache yes

#include <iostream> 
int main() 
{
std::cout << "sizeof(123u) " << sizeof(123u) << std::endl;
std::cout << "sizeof(123ul) " << sizeof(123ul) << std::endl;
std::cout << "sizeof(123ull) " << sizeof(123ull) << std::endl;
} 

#+END_SRC

#+RESULTS[2cfde06023a5646abe0954ea11a40a6b81af5906]:
| sizeof(123u)   | 4 |
| sizeof(123ul)  | 4 |
| sizeof(123ull) | 8 |

# https://en.cppreference.com/w/cpp/language/integer_literal 
** Variable Type
 | Category  | Type                      | Meaning       | Example |   |
 |-----------+---------------------------+---------------+---------+---|
 | boolean   | bool                      | true or false |         |   |
 | Character | char                      |               |         |   |
 | Integer   | short,int,long,long long  |               |         |   |
 | floating  | float, double,long double |               |         |   |
 | void      | no type                   |               |         |   |
** bool 
#+BEGIN_SRC C++  :exports both :cache yes
#include <iostream> 
int main() 
{
std::cout << std::boolalpha << true << std::endl; 
std::cout << std::boolalpha << false << std::endl;
 std::cout << std::noboolalpha << true << std::endl;
 std::cout << std::noboolalpha << false << std::endl;
} 
#+END_SRC 

#+RESULTS[761dc02922fa049315904bec55f4709d19fa6a39]:
|  true |
| false |
|     1 |
|     0 |
** Variable initialization
#+BEGIN_SRC C++
int Number_of_Employee = 100;
//Uniform initialization
int Number_Of_Employee = {100};
#+END_SRC
** Signed integer Data Types
| Type        | Size | Range                                       |
|-------------+------+---------------------------------------------|
| signed char |    1 | -128 to 127                                 |
| short       |    2 | -256 to 255                                 |
| signed int  |    4 | -2147483648 to 2147483647                   |
| long int    |    8 | -9223372036854775808 to 9223372036854775807 |

** Signed and Unsigned 
Below example shows behaviour when signed and unsigned values are mixed.
#+BEGIN_SRC C++  :exports both :cache yes
#include <iostream> 
int main() 
{
unsigned u = 20;
int i = -42;

std::cout << i + i << std::endl;;
std::cout << u + i << std::endl;
} 
#+END_SRC 

#+RESULTS[32d1f3894007c02aac1578f090e38ec6cf803d2e]:
|        -84 |
| 4294967274 |

# C++ Primer 2.1.2
*** Activity 1
What will be output of this code ?
 #+BEGIN_SRC C++ :exports code :eval yes

#include <iostream> 
int main() 
{
  for(signed int i = 10; i >= 0 ; i++)
  {
  std::cout << i << std::endl;
  } 
}
 
 #+END_SRC

# C++ Primer 2.1.2
** Varible with fixed values
** Integer Literals 
** Floating point Literals
** Character Literals
** Sting Literals
** Sizeof operator
Is used to obtain the number of bytes occupied by the type, variable or result of an expression.

* Variables and Fundamental Data Types
A variable is a named piece of memory a programmer defines.
Every variable has a type which defines what kind of data it can store.

* Complex Data Structure
** Array
** String
** Structure
** Unions
** Enumerations

* Statements
** null statements
A simple with semicolon *;* is a null statement. Its useful in case we need statement but no program 
logic. 
#+BEGIN_SRC C++ :eval no

while(cin >> input && input ~!= "end" )
{
    ; // Do nothing
}

#+END_SRC

#+BEGIN_SRC C++ :eval no 

for ( int i = 0; i < 100 ; i++) ;
//This count will never get increamented due to null statement 
   count++ ;

#+END_SRC
* Flow Control
** if
** while
** for
** switch
* Operators
** Arithmetic
| Operations     | Operators | C++        |
|----------------+-----------+------------|
| Addition       | +         | count + 10 |
| Subtraction    | -         | count - 10 |
| Multiplication | *         | count * 10 |
| Division       | /         | count / 10 |
| Reminder       | %         | count % 10 |

Interger division always produce integer output for eg.
#+BEGIN_SRC C++ :exports both :cache yes
#include <iostream>  //Used for output data to console

int main()
{
std::cout << "Division 7/2 = " << 7/2 << std::endl;
std::cout << "Reminder 7%2 = " << 7%2 << std::endl;
return 0;
}
#+END_SRC

#+RESULTS[188f91238c931739ca08b4491379a49494ca84e8]:
| Division | 7/2 | = | 3 |
| Reminder | 7%2 | = | 1 |

*** Prcedence of arithmetic operators
| Operator | order of evluation                      |
|----------+-----------------------------------------|
| ()       | Evaluated first.                        |
| * /  %   | Evaluated second in left to right order |
| +  -     | Evaluated last in left to right order   |
** Increament and Decreament 
*** Postfix Increament
#+BEGIN_SRC C++ :exports both :cache yes
  #include <iostream> 
  int main() 
  {
     int total = 0;
     int count = 5;
    std::cout << "count\t" << count << std::endl << "total\t" << total << std::endl ;
    count = total++  + 20; 
    std::cout << "count\t" << count << std::endl << "total\t" << total  << std::endl;
    }
#+END_SRC

#+RESULTS[ccbe36bc80a25a3157d2e5a95e313481927fbe4e]:
| count |  5 |
| total |  0 |
| count | 20 |
| total |  1 |

*** Prefix Increament
#+BEGIN_SRC C++ :exports both :cache yes
  #include <iostream> 
  int main() 
  {
     int total = 0;
     int count = 5;
    std::cout << "count\t" << count << std::endl << "total\t" << total << std::endl ;
    count = ++total+ 20; 
    std::cout << "count\t" << count << std::endl << "total\t" << total  << std::endl;
    }
#+END_SRC

#+RESULTS[b899901a7ea31195efe4334aca07f5f03a93e3e9]:
| count |  5 |
| total |  0 |
| count | 21 |
| total |  1 |

*** Prefer prefix over postfix
When postfix operator is used compiler must store original value , then perform operations and then increament. If
we don't need unincreamented value this is costly operation.

** Comparison
For various logical condition checking we need to compare to variables using comparison operator.
| Operator | Sample | Meaning                    |
|----------+--------+----------------------------|
| >        | x > y  | x is greater than y        |
| <        | x < y  | x is less than y           |
| >=       | x >= y | x is greater or equal to y |
| <=       | x <=y  | x is less or equal to y    |
| ==       | x == y | if x is equal to y         |
| !=       | x != y | if x is not equal to y     |

Reversing order of operators may cause complier to emit syntax error. But some operator like != when 
written like =! will be logical error.
Also equality operator == when written like = will be logical error.
*** Prcedence of comparison operators
| Operator  | order of evluation                      |
|-----------+-----------------------------------------|
| ()        | Evaluated first.                        |
| * /  %    | Evaluated second in left to right order |
| << >>     |                                         |
| < <= > >= |                                         |
| == !=     |                                         |
| =         |                                         |

** Bitwise
These operators allowes to manuplate individual bits of integer type variables.
| operation        | Operator  |
|------------------+-----------|
| One's complement | ~x        |
| left shift       | x << y    |
| right shift      | x >> y    |
| Bitwise and      | x & y     |
| Bitwise or       | x \vert y |
| Bitwise Xor      | x ^y      |

** logical Not Operator
Invert the truth value.
** conditional 
#+BEGIN_SRC C :eval no :cache no 
string result = (marks < 35 ) ? "Fail" : "Pass" ;
#+END_SRC

* Iteration

* Functions
** Prototype
** Parameters
** inline 
** Storage classes and scope

* Header Files
* Reference 
  A referance is an alternate name for variable or object. All referance must be initialized. All operations performed 
on refernces act on binded variable or object.
#+BEGIN_SRC C++ :eval no 
int original_var = 10;
int &ref_var = original_var;
int &ref_lit = 100; //Error can't refer to literal constant
float &fref_var = original_var;  // Reference should be of same type

#+END_SRC
* Pointers 
** references to pointers
A reference is not an object hence we may not have pointers to references but we can have reference to pointer.
#+BEGIN_SRC C++ :exports both :cache yes
#include <iostream>
int main()
{

  int i = 100;
  int *iptr = &i;
  int *&iptrref = iptr;

  std::cout << "Value of i =\t " << i << std::endl ;
  std::cout << "Value of i using poiner iptr =\t " << *iptr << std::endl ;
  std::cout << "Value of i using reference to pointer =\t " << *iptrref << std::endl ;
}

#+END_SRC

#+RESULTS[817c89ad6b559f15e2a9933042c38db3c2f5816d]:
| Value of i =                            | 100 |
| Value of i using poiner iptr =          | 100 |
| Value of i using reference to pointer = | 100 |

** nullptr
** Advice
Uninitalized pointers are very common cause of run time errors or program crashes. When an uninitialized pointer 
is dereferanced it will cause run time error.
If there is no way to have valid address to pointer then it should be initialized to *nullptr* 
** void pointers
A void pointer is a special pointer which can hold the address of any object. But can't be used to operate on 
object.
* Array
** Declaration
An array is a data structure used for storing collection of values having same data type and of fixed size.
Number of elements in array must be known compile time hence shoulde be constant expression.

#+BEGIN_SRC C++ :eval no 

//Declaration
int myarray[3];

//assignment 
myarray[0] = 100;
myarray[1] = 200;
myarray[2] = 300;

#+END_SRC


#+BEGIN_SRC C++ :eval no 
int *iptr[10]; // array of 10 pointers to integer
int arr[10] ; 
int (*ptarr)[10] = &arr ; // ptarr is pointer to array of 10 ints
int (&refarr)[10] = arr ; // refarr is referance to array of 10 int

#+END_SRC
** Array element access
Individual array elements can be accessed using subscript *[]* operator.
** Array and pointer 
In C and C++ for most of cases pointers and array are interchangeble. 
In most cases when we use array compiler most of time substitutes with pointer to first element.

#+BEGIN_SRC C++ :eval no
char names[] =  "Hello World";

char *c = names; // C points to H
#+END_SRC

** Array begin end

#+BEGIN_SRC C++ :export both :cache yes :flags -std=c++11
#include <iostream>
#include <vector>

int main()
{
    char name[] =  "Hello World";
    char *start = std::begin(name);
    char *end = std::end(name);

    while (start < end)
  {
    std::cout << *(start++) << " " ;
  }
    std::cout << std::endl;
}
#+END_SRC

#+RESULTS[bef626bd9789e5fde5819c1ef63f7100828f042e]:
: H e l l o   W o r l d  



* struct
* enumerations 
An enumeration is a distinct type whose values are restricated to range of integral values. 
By default enumeration starts with 0 and increamented subsequently. but you can provide user defined values to 1 or more enumerations.
We can have enumerations with same value. 
** unscoped enumeration 
#+BEGIN_SRC C++ :export code :cache yes
 //Enum with default values starting from 0 
enum colour {red,green,blue}; //Enum with user defined value 
enum types {INT = 32 , SHORT = 16 , CHAR = 8 , LONG = 32} 
#+END_SRC
* scoped enumeration
#+BEGIN_SRC C++ :exports both :cache yes :flags 
#include <iostream> 
enum class grades { fail,pass, distinction};
 enum types {INT = 32 , SHORT = 16 , CHAR = 8 , LONG = 32}; 

int main() 
{
//ERROR can't convert to int implicitly as strongly typed enumeration 
//std::cout  << "Fail = \t " << grades::fail << std::endl; 
std::cout  << "Size of INT in bits  = \t " << INT << std::endl;} 
#+END_SRC 
** specifying enum size 
** Enum as function parameter
Enum can be passed to function taking integer parameter but not otherway. When passed for int parameter enum is promoted to integer.

* Type Alias 
A type alias is a name that is synonym for other type. It helps to simplify complicated type definitions.
We can use *typedef* keyword
#+BEGIN_SRC C :eval no :caches no

typedef double amount; // amount is synonym for double

using amount = double; //C++11

#+END_SRC

* Implicit Type conversion
Conversions which are carried out by compiler without user intervention are called as implicit conversions.
#+BEGIN_SRC C :eval no 

int ivar = 3.14 + 5 ; //Result is 8 instead of 8.14 

#+END_SRC
** Array to Pointer
This is implicit conversion where array will be converted to pointer to first element in array.

#+BEGIN_SRC C :eval no 
char str[] = "Hello World" ;
char *cptr = str; //cptr points to H str[0]

#+END_SRC
** Pointer to numric 
A constant value of 0 and *nullptr* will be converted to pointer type.
** bool 
if value is 0 it will yeild boolean false.
** const conversions
we can convert non constant type to corrsponding const type. 
#+BEGIN_SRC C :eval no
int i;

const int &j  = i; //non const to reference to const 
const int *p = &i ; // address of non const to address of const

#+END_SRC

* Explicite Type conversion
Need of type casting
#+BEGIN_SRC C++ :export both :cache yes
#include <iostream>

int main()
{
int i = 10;
int j = 3;

//int division with int produce int 
std::cout  << "i / j =\t" << i / j << std::endl;

}

#+END_SRC

#+RESULTS[b6da320690ecae4f7c2f6fc32ccd786fd3239597]:
| i / j = | 3 |

To convert result to floating point number one of the operand should be of type float or double.
Or shoudl be temporarly promoted to double uisng casting.

** static cast
#+BEGIN_SRC C++ :export both :cache yes
#include <iostream>

int main()
{
int i = 10;
int j = 3;

//int division with int produce int 
std::cout  << "i / j =\t" << static_cast<double>(i) / j << std::endl;

}

#+END_SRC

#+RESULTS[44645e1eac014c9e093d827187a0203155879007]:
| i / j = | 3.33333 |

** const cast
const cast is used for cast away the constant ness of variable.
only const cast can be used for remove const ness.

* auto type specifier
compiler can auto deduce type based on evaluation of inital value.
#+BEGIN_SRC C :eval no :caches no
auto PI = 3.14; //PI is double 
auto var ; //Error must have inital value

#+END_SRC

#+BEGIN_SRC C++ :export both :cache yes :flags -std=c++11

#include <iostream>
int main()
{
    char name[] = "Hello World";

    for ( auto c : name)
    {
      std::cout << c << "" ;
    }
}



#+END_SRC

#+RESULTS[a74c6b00db0a3390b6183abcea48ccca12abf271]:
: Hello World 

* decltype specifier
When we want compiler to deduce type from expression but don't want to use expression
to initialize the variable, we can use *decltype* specifier.
#+BEGIN_SRC C :eval no :caches no
const int cint = 0;

decltype(cint) x = 100; // x is const int

#+END_SRC

#+BEGIN_SRC C :eval no :caches no
decltype(x) y ; // y has same type as x
decltype((x)) z ; // Error z is int& hence must be initialized
#+END_SRC

# C++ primer
* Classes and Object
Object is any real world entity which has attributes, behaviour , state and identity.
Compared to object is template or blueprint of object from which many objects can be created. 
object is an instance of a class. 
* Constructor
** Default 
** Copy constructor
** initializer list
** Explicite
** Constructor delegation
** Default values to member
* Destructor
A destructor is a function that is called every time when an object is destroyed.
Never thorow an exception in destructor. (destructors are implicitly defined as *noexcept*)
If class contains virtual functions the destructor should be virtual.
* Destructor
* static 
** static data member 
static member have only one copy for entire class. static members are shared by all class instances.
static class members will be initialized out side class and will have life time of entier program.
Use scope resolution operator to access static members of class.

#+BEGIN_SRC C++ :eval no 
class Circle {
public:
     static doubel PI;
}

//Initialization
//static keyword is only used in declaration and not in initialization
double Circle::PI = 3.14F;

#+END_SRC

** static member functions
A function can be declared static it can *only* access static members. 
** static local variable
Local variable inside function when declared constant preserve its value across multiple function call.
function static variable have full life time but only visible in function scope.
#+BEGIN_SRC C++ :eval no
int foo()
{
static int callcounter = 0;
callcounter++;
}

#+END_SRC
** static global
Variable declared outside function with static keyword has file scope but have full program lifetime.
** In class initialization of static data members
static data members having const integral type or constexpr must be initialized when defined in class.
#+BEGIN_SRC C++ :eval no
class Employee {
public:
    static int retire_age = 58;

}
// Must be defined without initialization
int Employee::retire_age; 


#+END_SRC
* Member initializer list
* Inheritance 
* Interfaces
* const qualifier 
const qualified variable value can't be changed. Because we can't change the value of const 
variable it must be initialized when we create it.

#+BEGIN_SRC C++ :eval no :cache yes
const int buffersize = 100;
buffersize = 200 ; //ERROR can't change the value
const int length; //ERROR must be initialize 
#+END_SRC
** const objects scope
   By default all the const objects have local scope. Hence when we split program in multiple files.
Every file that uses const must have initialzer which can have different value 

In order to have single instance of const object shared across multiple file we should use qualifier *extern* 
in both definition and declarations 
#+BEGIN_SRC C++ :eval no :caches yes
//.CPP file definition
extern const buffersize = 20;
//.h file declarations
extern const buffersize;
#+END_SRC

** Reference to cost
Reference to constant object can't be used to change object to which it refers to.
#+BEGIN_SRC C++ :eval no :cache yes
#include <iostream>

int main()
{
const int cint = 100;
const int &refcint = cint;
int &refint = cint; //ERROR can't have non const reference to const objects
}

#+END_SRC
We can initialize a reference to const from any expression that can be converted to type of reference.
We can bind reference to *const* to *nonconst* object or literal or expression.

#+BEGIN_SRC C++ :cache yes

#include <iostream>

int main()
{

int i = 42;

const int &r1 = i;
const int &r2 = 43; // OK reference to const 
const int &r3 = r1 * 2;

std::cout << "r1 \t " << r1 << std::endl;
std::cout << "r2 \t " << r2 << std::endl;
std::cout << "r3 \t " << r3 << std::endl;

//int &r4 = 43; //ERROR non const reference to constant
} 

#+END_SRC

#+RESULTS[263f6003f9aa474164f593473f1c01b354089ac7]:
| r1 | 42 |
| r2 | 43 |
| r3 | 84 |

** Pointers and constant
*** Pointer to const 
#+BEGIN_SRC C :eval no 

const float PI = 3.14;
float *ptr = &PI ; //ERROR ptr is non-const
const float *fptr = &PI ; //Okay

#+END_SRC
*** Const pointer
A const pointer once initialized its value i.e. address is points to can't be changed. But we can change
the value at location it points to.
#+BEGIN_SRC C :eval no
int data = 100;
int * const cptr = &data;
*cptr = 200; //Value points to can be changed
++cptr ; //Error Pointer value can't be chaanged

#+END_SRC

To easily understand this declarations please read from right to left.

* mutable
* constexpr
A constant expression is an expression whose value can't be changedand that can be evaluated at complile time.
* operator overloading 
* this keyword
* object lifetime
* auto keyword 
* Namespaces 
* Unions
* Why virtual destructors
* Casting
* Templates
** Function Template
#+BEGIN_SRC C :exports no :eval no
#ifndef min
#define min(a,b) (((a) < (b)) ? (a) : (b))
#endif

return (a<b) ? a : b;
}


#+END_SRC
# Apllied C++, Practical Techniques for building better software
* Advance Topics
** Return value optimization
** Copy elision
** RAII
