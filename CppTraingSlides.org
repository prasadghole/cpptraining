#+Title: C++ Training
# +Author: Prasad Ghole
#+Email: prasad.ghole@lnttechservices.com
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/ 
#+REVEAL_THEME: night
#+OPTIONS: toc:nil num:nil timestamp:nil 


* Introduction
C++ is a statically typed, compiled, general-purpose, case-sensitive, free-form programming language that supports procedural,
object-oriented, and generic programming paradigms.
* Hello World
#+BEGIN_SRC C++  :exports both
#include <iostream>

int main(int argc, char** argv)
{
     std::cout << "Hello, world. " << std::endl;
     return 0;
}
#+END_SRC

#+RESULTS:
| Hello | world. |

* History
C++ was developed by Bjarne Stroustrup starting in 1979 at Bell Labs in Murray Hill, New Jersey,
as an enhancement to the C language and originally named C with Classes but later it was renamed 
C++ in 1983.
* Setup
  For windows we can download latest precompiled binaries for gcc tool chain at tdm-gcc.trdragon.org
  


* Build Tools
  gnu toolchain provide g++ command to build executable from source code.
#+BEGIN_SRC shell
g++ Program.cpp
#+END_SRC
* Popular Tools
| Tools         | Platforms              |
|---------------+------------------------|
| Visual Studio | Windows                |
| Xcode         | Mac                    |
| CodeBlock     | Windows                |
| QT Creator    | Windows, linux and Mac |
|               |                        |

* Build Process
** Compiling
** Linking

Converting C++ source code in machine language which can be exectured by underline microprocessor
is called as build process.
* Language Features
1. Statically typed
2. Support procedural , object oriented and generic programming paradigms
3. Compiled
4. Versatile standard library
5. Encapsulation
6. Inheritance
7. Polymorphism 

   
* Variables and Fundamental Data Types
A variable is a named piece of memory a programmer defines.
Every variable has a type which defines what kind of data it can store.
** Variable Type
 | Category  | Type                      | Meaning       | Example |   |
 |-----------+---------------------------+---------------+---------+---|
 | boolean   | bool                      | true or false |         |   |
 | Character | char                      |               |         |   |
 | Integer   | short,int,long,long long  |               |         |   |
 | floating  | float, double,long double |               |         |   |
 | void      | no type                   |               |         |   |
** bool

#+BEGIN_SRC C++  :exports both
#include <iostream>

int main()
{
std::cout << std::boolalpha << true << std::endl;
std::cout << std::boolalpha << false << std::endl;
std::cout << std::noboolalpha << true << std::endl;
std::cout << std::noboolalpha << false << std::endl;
}

#+END_SRC

#+RESULTS:
|  true |
| false |
|     1 |
|     0 |


** Variable initialization
#+BEGIN_SRC c
int Number_of_Employee = 100;
//Uniform initialization
int Number_Of_Employee = {100};
#+END_SRC
** Signed integer Data Types
| Type        | Size | Range                                       |
|-------------+------+---------------------------------------------|
| signed char |    1 | -128 to 127                                 |
| short       |    2 | -256 to 255                                 |
| signed int  |    4 | -2147483648 to 2147483647                   |
| long int    |    8 | -9223372036854775808 to 9223372036854775807 |

** Varible with fixed values
** Integer Literals 
** Floating point Literals
** Character Literals
** Sting Literals
** Sizeof operator
Is used to obtain the number of bytes occupied by the type, variable or result of an expression.

* Complex Data Structure
** Array
** String
** Structure
** Unions
** Enumerations

* Flow Control
** if
** while
** for
** switch
* Operators
** Arithmetic
** Comparison
** Bitwise

* Iteration

* Functions
** Prototype
** Parameters
** inline 
** Storage classes and scope

* Header Files
* Pointers 
* Reference 
* Array
* struct
* enumerations 
* Classes and Objects
* Constructor
* copy constructor
* Destructor
* Member initializer list
* Inheritance 
* Interfaces
* const
* mutable
* operator overloading 
* this keyword
* object lifetime
* auto keyword 
* Namespaces 
* Unions
* Why virtual destructors
* Casting
